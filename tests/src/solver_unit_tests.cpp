#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include "gtest/gtest.h"
#include "tests_utils.h"

extern "C" {
#include "hw1.h"
}

extern char board[MAX_ROWS][MAX_COLS];

class solver_tests : public testing::Test { 
    void SetUp() override {
        
    }
};

// Small square board
TEST_F(solver_tests, board4x4) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xoxox---oo--ooo-";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'V','<','1',',','G','3','b','+','9','z','q','"','*','d',']','+','Z','}','T','h',},
    {'2','b','~','+','w','G','-','C','0','9','p','f','U','~','p','y','0','S','&','F',},
    {'K','w','E','U','Y','$','^','4','"','0','y','1','r','u','=','j','=','G','+','N',},
    {'`','y','2','3','u','#','-','&','S','0','J',' ','%','o','R','^','p','1','o','r',},
    {'B','i','"','2','`','?','}','z','f','&','I','D',' ','Y','T','v',']','a','y','1',},
    {'o','D','.','t','5','`','T','&','r','D','v','2',',','x','D','l','5','?','d','{',},
    {'F',',','=','C','e','q',':','B','P','5','P','@','Y','^','6','k','=','g','o','-',},
    {')','f','?','5',']','`','~','q','}','d','j','D','p','(','g','S','v',' ','u','G',},
    {'5','D','e','k','#','x','X','@','`','E','M','f',',','i','|','e','H','x','W','F',},
    {']','B','g','K','G','O','{','>','L','o','b','a','4','H','K','4','A','!','R','~',},
    {'F','|','f','O','g','`','5','-','Y','l','S','5',',',';',']','S','g','Z','n','5',},
    {'J','Q','s','^','w','?','o','6','@','B','6','f','@','y','6','%','Z','H','2','4',},
    {'5','e','F','>','}','%','q','e','_','`','z','(','0','o','b','(','/','R','>','M',},
    {'r','Q','1','3','K','E','5','#','m','D','5','!','(','[','?','%','`','/','j','=',},
    {'l','c','D','|','S','$','"','_','W','>','*','J','o','<','Z','9','a','l','<','O',},
    {'1','Q','M','8','+','m','=','k','|','%','(','f','h','H','d','9','M','c','y','"',},
    {'"','$','I','r','@','$',')','~','p','B','L','~','q','y','7','|','d','T','e','^',},
    {'Y','l','F','@','6','(','Y','`','k','S','b','n','U',',','^','r','-','g','r','z',},
    {'(','<','y','x','6','.','u','{','_','Y','Z','9','F','}','V','Y','&','1','7','r',},
    {'a','v','a','7',' ','@','(','-','%','w','%',',','4','{','#','G','*','x','C','i',},
    };    
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 4, 4, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(7, act_num_x);
    EXPECT_EQ(9, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','o','x','o','G','3','b','+','9','z','q','"','*','d',']','+','Z','}','T','h',},
    {'x','x','x','o','w','G','-','C','0','9','p','f','U','~','p','y','0','S','&','F',},
    {'o','o','o','x','Y','$','^','4','"','0','y','1','r','u','=','j','=','G','+','N',},
    {'o','o','o','x','u','#','-','&','S','0','J',' ','%','o','R','^','p','1','o','r',},
    {'B','i','"','2','`','?','}','z','f','&','I','D',' ','Y','T','v',']','a','y','1',},
    {'o','D','.','t','5','`','T','&','r','D','v','2',',','x','D','l','5','?','d','{',},
    {'F',',','=','C','e','q',':','B','P','5','P','@','Y','^','6','k','=','g','o','-',},
    {')','f','?','5',']','`','~','q','}','d','j','D','p','(','g','S','v',' ','u','G',},
    {'5','D','e','k','#','x','X','@','`','E','M','f',',','i','|','e','H','x','W','F',},
    {']','B','g','K','G','O','{','>','L','o','b','a','4','H','K','4','A','!','R','~',},
    {'F','|','f','O','g','`','5','-','Y','l','S','5',',',';',']','S','g','Z','n','5',},
    {'J','Q','s','^','w','?','o','6','@','B','6','f','@','y','6','%','Z','H','2','4',},
    {'5','e','F','>','}','%','q','e','_','`','z','(','0','o','b','(','/','R','>','M',},
    {'r','Q','1','3','K','E','5','#','m','D','5','!','(','[','?','%','`','/','j','=',},
    {'l','c','D','|','S','$','"','_','W','>','*','J','o','<','Z','9','a','l','<','O',},
    {'1','Q','M','8','+','m','=','k','|','%','(','f','h','H','d','9','M','c','y','"',},
    {'"','$','I','r','@','$',')','~','p','B','L','~','q','y','7','|','d','T','e','^',},
    {'Y','l','F','@','6','(','Y','`','k','S','b','n','U',',','^','r','-','g','r','z',},
    {'(','<','y','x','6','.','u','{','_','Y','Z','9','F','}','V','Y','&','1','7','r',},
    {'a','v','a','7',' ','@','(','-','%','w','%',',','4','{','#','G','*','x','C','i',},
    };
    assert_arrays_equal(exp_board, board);
}

// Puzzle can be solved, but pieces outside boundary could interfere with solution
TEST_F(solver_tests, board8x8_tricky) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xxoo---oo--o--oooo----o--o-----ox----------x--xoooxx-o-o--xx--oo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'^','D','C','9','[','$','H','q','o','o','o','Y','v','#','[','I','|','?','(','y',},
    {'A','5','w','A','K','>','9','H','n','j','n','J','/','/','c','j','4','-','Y','2',},
    {'6','`','k','-','`','E','W',']','d',']','T','$','q','J','B',':','h','[','_','U',},
    {'F','L',' ','S','[','d',';','l','n','r',' ','%','S','h','2','1','.','f','n','p',},
    {'@','@','t','0','j','7','J','Q','x','x','x','x','x','$','g','-','h','!','z','T',},
    {'s','w','Y','D','`','i','U','o','M','A',']','n','a','R','~','J','f','F','{','W',},
    {'K',' ','i','|','$','N','(','j','O','#','?','C','w','v','g','X','`',':','E','+',},
    {'[',' ','v','>','R','r','h','7','o','o','k','b','a','U',']','e','%','e','P','T',},
    {'e','x','u','x','x','Z','3','o','u','V','M','Q','V','E','l','(','8','R','>','O',},
    {'4','*','3','r','`','x','Y','o','S','(','4','6','t','*','s','Y','b','$','{','U',},
    {'Z','J','(','2','l','q','9','%','D','W','U','V','^','e','I','?','S',' ','~','$',},
    {'(','4',':','|',';','+','W','}','/','P','S','j','z','X','|','g','J','3','j','k',},
    {'g','=','B','F','#','i','c','S','i','b','T','q','v','n','l','0','y','D','+',')',},
    {'t','_','p','m','5','j','R',']','}','=','H','e','W','h','-','Z','R','p','+','9',},
    {'P','_',',','E','K','x','U','E',':','`','L',',','=',':','v','R','&','J','/','$',},
    {'d','X','g','=','>','q','t','m','b','}','(','0',']','3','U','(',')','+','I','@',},
    {'l','u','M','*','.','A',']','4','h','i','5','N','?','y','h',']','k','Z','K','K',},
    {'X','S',']','4','c','2',';','j','>','d','+','(','X','U','2','f','w','l','w',']',},
    {'W','*',',','s','%','q','O','p','M','z','=','#','K','v','7','-',')','R','w','G',},
    {'5',' ','O','m','S','_','Q','H','I','I','&','}','S','0','r','U','"','B','G','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 8, 8, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(29, act_num_x);
    EXPECT_EQ(35, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','x','o','o','x','o','x','o','o','o','o','Y','v','#','[','I','|','?','(','y',},
    {'o','x','o','o','o','x','o','o','n','j','n','J','/','/','c','j','4','-','Y','2',},
    {'o','o','x','x','o','x','o','x','d',']','T','$','q','J','B',':','h','[','_','U',},
    {'x','o','x','o','x','x','o','o','n','r',' ','%','S','h','2','1','.','f','n','p',},
    {'x','x','x','o','o','o','x','x','x','x','x','x','x','$','g','-','h','!','z','T',},
    {'o','o','o','x','x','o','x','o','M','A',']','n','a','R','~','J','f','F','{','W',},
    {'o','o','x','x','o','o','x','o','O','#','?','C','w','v','g','X','`',':','E','+',},
    {'x','o','x','x','o','x','o','o','o','o','k','b','a','U',']','e','%','e','P','T',},
    {'e','x','u','x','x','Z','3','o','u','V','M','Q','V','E','l','(','8','R','>','O',},
    {'4','*','3','r','`','x','Y','o','S','(','4','6','t','*','s','Y','b','$','{','U',},
    {'Z','J','(','2','l','q','9','%','D','W','U','V','^','e','I','?','S',' ','~','$',},
    {'(','4',':','|',';','+','W','}','/','P','S','j','z','X','|','g','J','3','j','k',},
    {'g','=','B','F','#','i','c','S','i','b','T','q','v','n','l','0','y','D','+',')',},
    {'t','_','p','m','5','j','R',']','}','=','H','e','W','h','-','Z','R','p','+','9',},
    {'P','_',',','E','K','x','U','E',':','`','L',',','=',':','v','R','&','J','/','$',},
    {'d','X','g','=','>','q','t','m','b','}','(','0',']','3','U','(',')','+','I','@',},
    {'l','u','M','*','.','A',']','4','h','i','5','N','?','y','h',']','k','Z','K','K',},
    {'X','S',']','4','c','2',';','j','>','d','+','(','X','U','2','f','w','l','w',']',},
    {'W','*',',','s','%','q','O','p','M','z','=','#','K','v','7','-',')','R','w','G',},
    {'5',' ','O','m','S','_','Q','H','I','I','&','}','S','0','r','U','"','B','G','L',},
    };    
    assert_arrays_equal(exp_board, board);
}

// Medium square board
TEST_F(solver_tests, board12x12) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "-x--o-o--xxxo-ox-----x-o-----o--o--xo---o-----x--o------o---o--xx----oooxo----x-----o--ooo--oo--x--o----oo-xoo--o------xxo----------o--xx-xx-xx-";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'7','[','6','/','2','C','!','?','t','x','*','&','P','B','l','=','b','j','_','-',},
    {'<','t','w','?','>',']',',','_','0','_','S','D','8','i','T','H','-','R','g',' ',},
    {'K','r','&','x','5','o','7','u','Z','s',' ','w','h','w','7','$','Q','@','c','a',},
    {'|','7','(','6','}','X','[',')','(','C',')','S','6',',','M','I','x','a','?','S',},
    {'U','?','H',';','4',']','<','e','z',' ','G','t','4','K','+','2','!','c',';',')',},
    {'(','A','Z',';','J','(','d','C','f','!','t','9','=','=','T','Q','w','p','4','o',},
    {'m',']','d','"','%','m','1','(','Q','M','-','Y','k','g','r','7','l','W','Z','S',},
    {'V','O','l','s','j','>','C','_',',','W','O','y','1','4','x','7','"','+',';','Q',},
    {'X','H','+','A','1','}','X','z','S','4','O','*','`','9','z','H','X','>','(','d',},
    {'s','T',']','%','f','U','9','e','`','T','7','6','z','@','X',')',';','1','$','n',},
    {'B','S','u','!','j','n','I','C','*','O','%','}','!','a','$','g','8','=','K','x',},
    {'o','_','-','j',' ','e','s','<','s','t','(','7','F','{','5','1','j','[','T','t',},
    {'+','V','p','*','9','t','n','Q','/',':','G','{','z','T','c','w',':','T','1','/',},
    {'J',':','C','p','3','X','"','z','4','S','o','=','*','`','D','C','R','3','q','_',},
    {'K',':','[','C','k','=','8','$','q','J','3','<','a','S','*','t',')',',','o',':',},
    {']',']','T','g',';','x','(','m','*','z','J','R','2','$','u','}','A','.','"','3',},
    {'U','2','M','7','b','W',',','k','a','x','(','>','S','X','#','n','R',',','Y','Y',},
    {'(','%',',','6','&','~','4','G','-','4','W','c','C','%','w','(','Z','%','o','<',},
    {'z','s','W','N','M','[','=','|','d','t','V','k','y','b','~',' ','a','0','D','k',},
    {'D','{','L','e','"','E','l','Y','G',']','u','B','N','J','n','{','#',',','x','g',},
    }; 
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 12, 12, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(71, act_num_x);
    EXPECT_EQ(73, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','x','x','o','o','x','o','x','o','x','x','x','P','B','l','=','b','j','_','-',},
    {'o','o','o','x','x','o','x','o','x','x','o','o','8','i','T','H','-','R','g',' ',},
    {'o','x','o','x','o','o','x','o','o','o','x','x','h','w','7','$','Q','@','c','a',},
    {'o','x','o','x','o','x','o','o','x','x','x','o','6',',','M','I','x','a','?','S',},
    {'x','o','x','o','o','o','x','x','o','o','x','x','4','K','+','2','!','c',';',')',},
    {'o','o','x','x','x','o','o','o','x','o','o','o','=','=','T','Q','w','p','4','o',},
    {'x','o','o','x','o','x','x','x','o','x','x','o','k','g','r','7','l','W','Z','S',},
    {'o','x','x','o','o','o','x','x','o','o','o','x','1','4','x','7','"','+',';','Q',},
    {'x','o','x','o','x','o','x','o','o','o','x','x','`','9','z','H','X','>','(','d',},
    {'o','o','x','o','o','x','o','x','x','o','x','x','z','@','X',')',';','1','$','n',},
    {'x','o','o','x','o','x','o','x','o','x','o','o','!','a','$','g','8','=','K','x',},
    {'o','x','o','x','x','o','x','x','o','x','x','x','F','{','5','1','j','[','T','t',},
    {'+','V','p','*','9','t','n','Q','/',':','G','{','z','T','c','w',':','T','1','/',},
    {'J',':','C','p','3','X','"','z','4','S','o','=','*','`','D','C','R','3','q','_',},
    {'K',':','[','C','k','=','8','$','q','J','3','<','a','S','*','t',')',',','o',':',},
    {']',']','T','g',';','x','(','m','*','z','J','R','2','$','u','}','A','.','"','3',},
    {'U','2','M','7','b','W',',','k','a','x','(','>','S','X','#','n','R',',','Y','Y',},
    {'(','%',',','6','&','~','4','G','-','4','W','c','C','%','w','(','Z','%','o','<',},
    {'z','s','W','N','M','[','=','|','d','t','V','k','y','b','~',' ','a','0','D','k',},
    {'D','{','L','e','"','E','l','Y','G',']','u','B','N','J','n','{','#',',','x','g',},
    };
    assert_arrays_equal(exp_board, board);   
}

// Large square board
TEST_F(solver_tests, board20x20) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "-o----o--oxx---o--ox--------o--x--xx--xxxo--------------x-x-----o---x------xx-ox-----o-------o-----oo-oo----x---o----x-x----o------x---------------xoo-x---x--ox--o-x---o------o----ooo-x--x-----------------ox----x---x--xxoo--------o--o----oo-o--------o---x---ooox--x------x-------xo----o--------x---o-ooo--o---x-x-x---o-o--ox-----xx------ooo-o----o-----o-ox--oox-x----xxx--oo--xo--x-ooo----o-o-x-----x";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'l','T','q','<','=','r','d','F','i','!','T','v',',','u','a','=','k','E','U','[',},
    {'Q','V','b','$','c','O','f',']','U','_','!','?','1','o','[','O','`','@','u','G',},
    {'>','K',';','J','>','}','d','*','C','7','c','q','m','F','u','O','u','Y','*','I',},
    {':','(','h','H','w','B','w','X','_','k','|','~','4','9','F','R','7',')','Y','Z',},
    {'@','=','I',',','`','?','X','W','u','_','}','-','g','c','V',']','&','N','6','f',},
    {':','0','b','N','I',')','}','`','/','X','8','M','r','a','V','T','}','/',')','t',},
    {'n','$','"','S','g','X','0','n','%','C','R','?','T','5','k','}',';','i',']','K',},
    {'?','q','x','3','Q','O','d','L','[','m','>','G','q','>','z','V','s','(','E','x',},
    {'L','t','9','}','(','"','x','C','k','U','k',',','E','a','<','v','.','!','C','i',},
    {'k','b','.','Z','!','&','1','t','.','T','k','W','I','"','U','Q','$','O','q','o',},
    {'"',']','x','G','<','2',';','J','3',']','4','{','?','B','S','=','H','e','/','S',},
    {'7','z',',',']','y','^','/','}','+','}','k','.','X','d','R','t','t','n','?','%',},
    {'H','P','"','d','o','U','"','5','8','.','f','O','(','r','.','!','N',':','|','Z',},
    {'6','h','h','n','J','8','a','?','$','}','E','L','L','D','1','<','v','0','O','0',},
    {'?','6',']','C','&','g','A','T',' ','>','/','3','(','t','~','O','.','`','n','2',},
    {']','1',']',')','U','m','B','M','~','q','Z',';','(','4','^','+','y',' ','`','y',},
    {'<','o','-','C','e',',','r','p','j','_',' ','G','p',']','P','D','K','r','n','G',},
    {'b','I','b','g','Z','A','s','T','>','T','N','Z','A','X','{','$','b','k','t','M',},
    {'H','r','q',':','O','B','[','w','2','J','?','t','s','"','Z','N','@','N','$',']',},
    {'#','O','4','A','&','-','F','h','y','8','6','B','+','(','Y','[','G','5','P','V',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 20, 20, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(197, act_num_x);
    EXPECT_EQ(203, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'o','o','x','o','o','x','o','x','o','o','x','x','o','x','o','o','o','x','o','x',},
    {'x','x','o','x','x','x','o','o','o','x','x','x','o','o','x','x','x','o','x','x',},
    {'x','o','o','x','o','x','x','x','o','o','x','o','x','x','x','o','x','o','x','o',},
    {'x','o','o','x','o','o','o','x','x','x','o','x','o','o','x','x','x','o','o','x',},
    {'o','x','x','o','x','o','x','o','o','x','o','x','o','o','o','x','o','x','o','o',},
    {'o','x','o','o','x','o','x','o','x','x','o','o','o','x','x','x','o','x','x','x',},
    {'o','x','o','o','o','x','o','o','x','o','x','x','x','o','o','o','x','o','o','o',},
    {'x','o','x','x','o','x','o','x','o','o','x','x','o','x','x','x','o','x','o','x',},
    {'x','x','o','o','x','x','o','x','o','o','o','x','o','x','o','o','x','o','o','x',},
    {'o','o','o','x','x','o','x','x','o','x','x','o','o','x','x','o','x','o','x','o',},
    {'x','x','o','o','x','o','x','o','x','x','o','x','x','o','o','x','x','o','x','x',},
    {'o','o','x','x','o','o','x','x','o','x','o','o','x','o','x','o','o','x','o','o',},
    {'x','o','o','o','x','x','o','o','x','o','o','o','x','o','x','x','o','x','o','o',},
    {'o','x','x','o','x','o','x','o','x','o','x','x','o','x','o','o','o','x','x','x',},
    {'o','x','o','o','x','o','x','o','x','x','o','x','o','x','x','o','x','o','o','x',},
    {'o','o','o','x','o','o','x','x','o','x','x','x','o','x','x','o','x','o','x','o',},
    {'x','x','o','x','o','x','o','o','x','x','x','o','x','o','o','x','x','o','o','o',},
    {'o','o','x','x','o','o','o','x','o','o','x','o','o','x','o','x','o','x','o','o',},
    {'x','o','x','o','x','x','o','x','x','x','o','x','o','o','o','x','x','o','o','x',},
    {'x','x','o','o','o','x','x','x','o','o','x','o','o','x','x','o','x','o','x','x',},
    };
    assert_arrays_equal(exp_board, board);   
}

// Almost square board
TEST_F(solver_tests, board5x6) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "x-xx-x-xxx--xx-----xx--x--oo--";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'[','[','N','#','j','l','b','i','C','G','7','g','i','/','y','C','8','D','p','I',},
    {'c','m','$',']','@','K','E','"','^','{','A',':','T','l',';','@','Y','z','*','}',},
    {'B','B','b',',','N',']','L','f','"','>','0','b',')','1','@','F',']','b','H','8',},
    {'_','f','S','4','S','k','Q','+','f',']',')',')','{','h','3','J','E','_','/','D',},
    {'z','<','$','$','K','B','G','(','%','m','A','d','Q','q','v','&',']','E','.','A',},
    {'"','4','J','z','|','Z','C','?','8','R','a','3','k','b','5','7','%','Y','=','+',},
    {'G','[','l','y','M','`','|','(','(','+','I','&','?','p','~','9','L','B','U','a',},
    {'q','7','q',']','z','$','r',' ','^','0','(','#','k','r','|','6','S','v','>','W',},
    {'"','d','^','>','U',']','T','~','|','+','`','k','B','S','F',':','T','9','8','3',},
    {'F','@','7','2','0','1','E','a',')','`','9','(','E','t','G','{','O','{','w','L',},
    {'(','V','8','G','(','_','a','[','u','v','o','=','8','$','L','E','5','r','(',';',},
    {'S','A','D','y','6','k','r','f','d','g','0','i','>','F','1','E','#','o','"','x',},
    {'g','n','6','|','o','c','?','%','S','G','A','(','e','e','!','{','N','p','_','0',},
    {'Y','m','y','w','4','(',';','7','u',':','-','Z','&','A','T','u','%','s','w','X',},
    {';','6',']','!','x','^','z','G','L','W','U','#','E','O','{','V','U','4','j','K',},
    {'N','x','#','T',':','W','G','<','K','?','q','d','V','N','e','O','*',']','t','T',},
    {'6','J','W','X','v','P','-','L','d','w','t','0','m','w','d','%','L',',','A','u',},
    {'I','0','Z',' ','_','=','O','f','x','A',';',',','k','s','a','c','D','n','-','*',},
    {'d','#','7','O','w','|','U','B','&','s','8','O','%','o','O','a','*','|','E','#',},
    {'>','a','/','(','R','q','k','v',']','u','}','B','x','6','r','n','0','E','.','6',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 5, 6, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(17, act_num_x);
    EXPECT_EQ(13, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','o','x','x','o','x','b','i','C','G','7','g','i','/','y','C','8','D','p','I',},
    {'o','x','x','x','o','x','E','"','^','{','A',':','T','l',';','@','Y','z','*','}',},
    {'x','x','o','x','o','o','L','f','"','>','0','b',')','1','@','F',']','b','H','8',},
    {'o','x','x','o','x','x','Q','+','f',']',')',')','{','h','3','J','E','_','/','D',},
    {'x','o','o','o','x','o','G','(','%','m','A','d','Q','q','v','&',']','E','.','A',},
    {'"','4','J','z','|','Z','C','?','8','R','a','3','k','b','5','7','%','Y','=','+',},
    {'G','[','l','y','M','`','|','(','(','+','I','&','?','p','~','9','L','B','U','a',},
    {'q','7','q',']','z','$','r',' ','^','0','(','#','k','r','|','6','S','v','>','W',},
    {'"','d','^','>','U',']','T','~','|','+','`','k','B','S','F',':','T','9','8','3',},
    {'F','@','7','2','0','1','E','a',')','`','9','(','E','t','G','{','O','{','w','L',},
    {'(','V','8','G','(','_','a','[','u','v','o','=','8','$','L','E','5','r','(',';',},
    {'S','A','D','y','6','k','r','f','d','g','0','i','>','F','1','E','#','o','"','x',},
    {'g','n','6','|','o','c','?','%','S','G','A','(','e','e','!','{','N','p','_','0',},
    {'Y','m','y','w','4','(',';','7','u',':','-','Z','&','A','T','u','%','s','w','X',},
    {';','6',']','!','x','^','z','G','L','W','U','#','E','O','{','V','U','4','j','K',},
    {'N','x','#','T',':','W','G','<','K','?','q','d','V','N','e','O','*',']','t','T',},
    {'6','J','W','X','v','P','-','L','d','w','t','0','m','w','d','%','L',',','A','u',},
    {'I','0','Z',' ','_','=','O','f','x','A',';',',','k','s','a','c','D','n','-','*',},
    {'d','#','7','O','w','|','U','B','&','s','8','O','%','o','O','a','*','|','E','#',},
    {'>','a','/','(','R','q','k','v',']','u','}','B','x','6','r','n','0','E','.','6',},
    };
    assert_arrays_equal(exp_board, board);     
}

// Board has more rows than columns
TEST_F(solver_tests, board14x8) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "oo-o-x--o-xo--o--o--o---xo---xxx------xo---------xx--xx-o-----x-o------x----xo-oo--o--oo--------ooo--ooooo-ooo-o";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'f','&',':','b','N','<','B','i','X','.','n','W','Y','f','@','o','&','3','(','F',},
    {'/','7','>','H','J','i','4','{','z','H','|','a','N','7','E','y','T','d','c','*',},
    {'s','S','a','M','7','~',':','=','3','B','a','?','V',' ','h','~','j','y','w','b',},
    {'C','t','D','q',',','f','l',']','L','M','g','=','}','F','g','5','F','"','S','Y',},
    {'A','5','x','t','5','^','s','|','Y','h','_','|',']','"','n','g','h','X','B','2',},
    {'(','+','O','%','N','7',';','t','6','k','K','W','}','E','M','0','$','>','.',']',},
    {'(','j','W','b','l','D','G','S','|','g','b','!','r','0','(','>','D','?','4','[',},
    {'(',']','3','#','"',']','3','$','y','>','^','~','*','7','^','s','X','(','D','U',},
    {'n','(','T','^','8','[','y',']','w','+','5','|','h','F',' ','j','$','0','k','z',},
    {'O','K','y','V','_','Y','J','8',']','l','j','I','t','?','%','*','w','~','c','l',},
    {'+','y','i','s','@','f','[','A','w','H','=','D','p','7','z','P','m','B','e','K',},
    {'/','P','q','!','p','v','+','e','v','o','S','~','f',':','o','(','"','K','H','v',},
    {'p','e',';','a','z','3','/','h','U','t','2','b','C','$','c','1','x','l','v','l',},
    {'Y','G','k','@','b','[','G','a','$','l','X','u','S','p','W','K','$','g','1','V',},
    {'Y','C','6','|','E','w','+','>','d','#','+','>','J','s','[','*','O','#','k','P',},
    {'o','D','F','@','2','{','h','3','c','z','g',':','>','}','5','`','u','@','~','W',},
    {'@','(','r','h','z','N','r','G','N','_','x','?','!','?',']','4',';','F','G','{',},
    {'>','/','4',']','+','I','>','}','f',':','V','%','B','I','m','=','u',']','b','D',},
    {':','[','c','<','w','>','M','1','a','q','*',' ','"','>','Y','*','d','t','(','I',},
    {'0','^','K','O','&','9','i','{','s','L','@','/','%','"','H','z','=','u',',','~',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 14, 8, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(51, act_num_x);
    EXPECT_EQ(61, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'o','o','x','o','x','x','o','x','X','.','n','W','Y','f','@','o','&','3','(','F',},
    {'o','x','x','o','o','x','o','o','z','H','|','a','N','7','E','y','T','d','c','*',},
    {'o','o','o','x','o','o','o','x','3','B','a','?','V',' ','h','~','j','y','w','b',},
    {'x','o','x','o','o','x','x','x','L','M','g','=','}','F','g','5','F','"','S','Y',},
    {'x','o','x','x','x','o','x','o','Y','h','_','|',']','"','n','g','h','X','B','2',},
    {'x','x','o','o','o','x','o','o','6','k','K','W','}','E','M','0','$','>','.',']',},
    {'o','x','x','x','o','x','x','x','|','g','b','!','r','0','(','>','D','?','4','[',},
    {'o','x','o','o','o','x','x','o','y','>','^','~','*','7','^','s','X','(','D','U',},
    {'o','o','o','x','x','o','o','x','w','+','5','|','h','F',' ','j','$','0','k','z',},
    {'x','x','x','o','x','o','x','o',']','l','j','I','t','?','%','*','w','~','c','l',},
    {'o','o','x','o','x','o','o','o','w','H','=','D','p','7','z','P','m','B','e','K',},
    {'x','x','x','o','o','x','x','x','v','o','S','~','f',':','o','(','"','K','H','v',},
    {'o','o','o','x','x','o','o','o','U','t','2','b','C','$','c','1','x','l','v','l',},
    {'o','o','x','o','o','o','x','o','$','l','X','u','S','p','W','K','$','g','1','V',},
    {'Y','C','6','|','E','w','+','>','d','#','+','>','J','s','[','*','O','#','k','P',},
    {'o','D','F','@','2','{','h','3','c','z','g',':','>','}','5','`','u','@','~','W',},
    {'@','(','r','h','z','N','r','G','N','_','x','?','!','?',']','4',';','F','G','{',},
    {'>','/','4',']','+','I','>','}','f',':','V','%','B','I','m','=','u',']','b','D',},
    {':','[','c','<','w','>','M','1','a','q','*',' ','"','>','Y','*','d','t','(','I',},
    {'0','^','K','O','&','9','i','{','s','L','@','/','%','"','H','z','=','u',',','~',},
    };
    assert_arrays_equal(exp_board, board);
}

// Board has more columns than rows
TEST_F(solver_tests, board7x11) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "--x---ooo-o-o-----x--xooxx-o---xxo-x--o---x--x-----xoxo------x----oxo--ox-ooo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'e','l','p','<','/','i','~','d','h','.','8','N','0',')','p','j','i',')','R','I',},
    {']','+','%','^','g','e','I','Y','n','@','-','Q','+','}','j',':','d','f','|','J',},
    {'t','5','y','"',';','g','j','"','m','=','K','K','E','Q','*','*','4','P','`',' ',},
    {'q','m','Q','y','h','=','1','M','$','.','u','v','@','l','x','Y','Q','`','[','?',},
    {'}','%','j','@','S','q','H','g','B',')','e','1','t','7','(','Z','Q',':','&','S',},
    {'E','{','J','f','h','@','=',':','"','x','Y','|','z','A','>','N','3','c','4','R',},
    {'l','y','d','^','.','i',':','`','$','@','4','G','<','^','+','"','{','H','<','}',},
    {'A','r','x',':','4','4','h','D','w','|','s','a','s','U','A','#','@','[','`','A',},
    {'x','t','h','5','P','s','7','I','<','P','H','[','C','>','u','T','R','[','u','J',},
    {'V','i',',','J','@','M','J',']','&','+','~','~','|','h','1','M',']','E','w','v',},
    {'u','=','R','6','[','H','j','+','$','`','U','W','H','^','#','h','*','M','C','0',},
    {'Y','B','-','V','+',';','"','e','a','v',']','T','4',',','k','l','T','V','w','U',},
    {'5','J','.',']',')','.','F','0','X','i','>','2',')','K','f','2','c','e','w','E',},
    {']','Q','z','m',']','c','W','/',':','L','a','O','v','l','-','|','z','P','.','T',},
    {'7','L','c','>','t','G','P','U','-','H','x','f','y','s','T','W','T',')','c','n',},
    {'U','E','<','I','3','I','D','.','w','O','_',',','x','D','J','j','h','z','@','v',},
    {'@','9',']',':','*','0','n','^','6','R','N','l','u','j','3',')','1','W','7','&',},
    {'(','t','3',' ','6','Z','j','~','V',',','u','v','B','Q','/','M','^','z',',','t',},
    {'K','W','^','A','?','r','G','N','G','[','T','O','P','d','L','f','@','5','f','s',},
    {'>','Y','g','`','(','s','.','c','l','8','V','5','o','5','V','-','%','z','[','M',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 7, 11, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(37, act_num_x);
    EXPECT_EQ(40, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'o','x','x','x','o','x','o','o','o','x','o','N','0',')','p','j','i',')','R','I',},
    {'x','o','o','x','o','x','o','x','x','o','x','Q','+','}','j',':','d','f','|','J',},
    {'o','o','x','x','o','o','x','o','o','x','x','K','E','Q','*','*','4','P','`',' ',},
    {'o','o','x','o','x','o','o','x','o','x','o','v','@','l','x','Y','Q','`','[','?',},
    {'x','x','x','o','x','o','x','x','o','x','o','1','t','7','(','Z','Q',':','&','S',},
    {'o','x','o','o','x','x','x','o','x','o','x','|','z','A','>','N','3','c','4','R',},
    {'o','x','o','x','o','o','x','x','o','o','o','G','<','^','+','"','{','H','<','}',},
    {'A','r','x',':','4','4','h','D','w','|','s','a','s','U','A','#','@','[','`','A',},
    {'x','t','h','5','P','s','7','I','<','P','H','[','C','>','u','T','R','[','u','J',},
    {'V','i',',','J','@','M','J',']','&','+','~','~','|','h','1','M',']','E','w','v',},
    {'u','=','R','6','[','H','j','+','$','`','U','W','H','^','#','h','*','M','C','0',},
    {'Y','B','-','V','+',';','"','e','a','v',']','T','4',',','k','l','T','V','w','U',},
    {'5','J','.',']',')','.','F','0','X','i','>','2',')','K','f','2','c','e','w','E',},
    {']','Q','z','m',']','c','W','/',':','L','a','O','v','l','-','|','z','P','.','T',},
    {'7','L','c','>','t','G','P','U','-','H','x','f','y','s','T','W','T',')','c','n',},
    {'U','E','<','I','3','I','D','.','w','O','_',',','x','D','J','j','h','z','@','v',},
    {'@','9',']',':','*','0','n','^','6','R','N','l','u','j','3',')','1','W','7','&',},
    {'(','t','3',' ','6','Z','j','~','V',',','u','v','B','Q','/','M','^','z',',','t',},
    {'K','W','^','A','?','r','G','N','G','[','T','O','P','d','L','f','@','5','f','s',},
    {'>','Y','g','`','(','s','.','c','l','8','V','5','o','5','V','-','%','z','[','M',},
    };
    assert_arrays_equal(exp_board, board);
}

// Puzzle can be solved, but pieces outside boundary could interfere with solution
TEST_F(solver_tests, board5x8_tricky) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xx-x-o-o-o-x-xoo--xo--oo-ox-o-ox---o-oox";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'e','d','k','P','_','n','x','x','x','x','C',' ','b','A','-','t','3','Y','V','-',},
    {'4','w','%','[','B','o','o','N','Y',']','L','?','B','6','o',' ','"','m','x','5',},
    {'t','<','5','W','Z','B','M','m','{','!','z','.','x','|','i',';','a','c','f',';',},
    {'B','1','W','a','G','D','a','I','3','Z','^','(','s','p','_','K','0','*','6','*',},
    {',','1','8','%',',','~','>','m','c','"','(','#','3','^','d','W','$','G','~','7',},
    {'~','Z','<','p','L','{','<','Y','$','S','c','0','a','{','2','j','x','M','Y',']',},
    {'M',']','_','`','<','D','6','=','h','2','Q','o','l','m','V','6','g','o','p','k',},
    {'@','T','x',' ','N','(','j','G','S','A','!','o','~','`','a','9','"','t','V','h',},
    {'x','x','o','q','o','"','%','[','n','r','G','o','E','=','*','s','F','t','8','y',},
    {'4','x','o','0','y','o','I','x','L','}','^','o','$','-','?','w',',','E','T','x',},
    {'8','x','&','Z','4','0','N','W','"','f','Q','6','|','I','D','s',' ','m','m','I',},
    {'h','L','z','l','W',':','e','`',']','7','Y','u','0',']','P','D','l','|','{','l',},
    {'`','J','#','^','p','G','R','n','3','=','8','{','g','0','i','<','K','L','|','(',},
    {'c','W','z','p','1','I','3','~','C',',','k','$','T','k','_','E','1','0','1','D',},
    {'M','G','=','2','W','$','N',' ','P','L','&','4','!','!','#','2','G','6','.','j',},
    {'B','y','l','v','c','L',':','t',']','H','6','(','o','S',':','H','X','i','E','&',},
    {'3','K','8','4','J',';','C','q','N','R','Z','p','I','G','e','-','p','|','"','K',},
    {'E','5','S','6','i','j','[','?','Q','!','E','d','J','Z','u','t','u',':','f','D',},
    {'i','>','3','3','e','u','A','T','r','@',' ','5','V','P','K','=',';','$','Y','m',},
    {'#','{','O','M','W','C','B','J','Z','&','l','D','E','|','T','(','r','r','Y','b',},
    }; 
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 8, 5, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(19, act_num_x);
    EXPECT_EQ(21, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','x','o','x','x','n','x','x','x','x','C',' ','b','A','-','t','3','Y','V','-',},
    {'o','x','o','o','o','o','o','N','Y',']','L','?','B','6','o',' ','"','m','x','5',},
    {'x','x','o','x','o','B','M','m','{','!','z','.','x','|','i',';','a','c','f',';',},
    {'o','o','x','x','o','D','a','I','3','Z','^','(','s','p','_','K','0','*','6','*',},
    {'x','o','o','o','x','~','>','m','c','"','(','#','3','^','d','W','$','G','~','7',},
    {'o','x','x','o','o','{','<','Y','$','S','c','0','a','{','2','j','x','M','Y',']',},
    {'o','x','o','x','x','D','6','=','h','2','Q','o','l','m','V','6','g','o','p','k',},
    {'o','x','o','o','x','(','j','G','S','A','!','o','~','`','a','9','"','t','V','h',},
    {'x','x','o','q','o','"','%','[','n','r','G','o','E','=','*','s','F','t','8','y',},
    {'4','x','o','0','y','o','I','x','L','}','^','o','$','-','?','w',',','E','T','x',},
    {'8','x','&','Z','4','0','N','W','"','f','Q','6','|','I','D','s',' ','m','m','I',},
    {'h','L','z','l','W',':','e','`',']','7','Y','u','0',']','P','D','l','|','{','l',},
    {'`','J','#','^','p','G','R','n','3','=','8','{','g','0','i','<','K','L','|','(',},
    {'c','W','z','p','1','I','3','~','C',',','k','$','T','k','_','E','1','0','1','D',},
    {'M','G','=','2','W','$','N',' ','P','L','&','4','!','!','#','2','G','6','.','j',},
    {'B','y','l','v','c','L',':','t',']','H','6','(','o','S',':','H','X','i','E','&',},
    {'3','K','8','4','J',';','C','q','N','R','Z','p','I','G','e','-','p','|','"','K',},
    {'E','5','S','6','i','j','[','?','Q','!','E','d','J','Z','u','t','u',':','f','D',},
    {'i','>','3','3','e','u','A','T','r','@',' ','5','V','P','K','=',';','$','Y','m',},
    {'#','{','O','M','W','C','B','J','Z','&','l','D','E','|','T','(','r','r','Y','b',},
    };
    assert_arrays_equal(exp_board, board);   
}

// Puzzle can be solved, but pieces outside boundary could interfere with solution
TEST_F(solver_tests, board12x7_tricky) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xo--o---o---oo-------oxx-o-x----o--o-o---xx---ox----o-----o--x-x-x--xx-x---x--oo---x";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {']','e','V','@','}',']','d','>','L','N','F',':','s','O','6','f','=','<','(','W',},
    {'e','d','o','c','f','7',' ','o','o','=',')','2','#',']','S','}','6','5','9','`',},
    {'c',']','w','T','*','.',';','G','G','?','{','-','$','k','p','g','!','n','N','V',},
    {',','T','h',',','1','9','(','D','N','@','%','/','z','|','c','%','(','{','L','O',},
    {';','F',']','<','/','K','$','0','o','O','c','C','$','J','L','2','`','S','W','-',},
    {'p',']','<','l','W','}','n','o','y','<','0','6','b','i','R','q','2','T',' ','I',},
    {'!','`','l','&','(','6','5','i','f','i','s','U','D','0','?','{','.','.','[','&',},
    {'J','h','<','*','S','k','y','b','=','v','-','?','T','v','B',']','.','W','D','t',},
    {'B','8','J','f','E','f','_','x','u','8','W','@','"','s','H','R',']','?','5','z',},
    {'6','B','7','j','7','Y','E','E','.','i','7','M','~','_','1','B','F','p','s','<',},
    {'*','K','Z',')','<','#','[','x','?','m','p','U','.','%','=','E','^','c','j','j',},
    {'J','~','8','G','^','J','i','#','8','Z','?','B','&','v','H','B','v','$','8','6',},
    {'r','(','k','x',',','(','F','h','g','.','S','2','-','k','V','i','3','=','l','L',},
    {'w',')','k','}','!','5','=','t','6','V',',','&','Z','t','$','f','{','G','O','c',},
    {'U',' ','s','`','i','J','G','|','e','1','F',']','7','0','Y','5','B','v','+','X',},
    {'J','7',']','%',')','`','i','&',')','6','f','[','7','Z','9','!','#','`','z','h',},
    {'n','x','F','(','O',' ','<','n','t','G','G','?','[','$','B','e','b',',','h','k',},
    {'?','O','x','V','+','a','T','+','?','M','s','/','l','7','3','9','5','O','(','*',},
    {'t','L','F','x','N','e','3','1','n','x','y','/','I','A','b','Q',' ','8',']','=',},
    {'e','M','I','O','x',']','h','v',')','m','}','}','7','E','I','e','(','Y','s','w',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 12, 7, &act_num_x, &act_num_o);
    EXPECT_EQ(1, act_result);
    EXPECT_EQ(43, act_num_x);
    EXPECT_EQ(41, act_num_o);
    char exp_board[MAX_ROWS][MAX_COLS] = {
    {'x','o','x','o','o','o','x','>','L','N','F',':','s','O','6','f','=','<','(','W',},
    {'x','o','o','o','x','o','o','o','o','=',')','2','#',']','S','}','6','5','9','`',},
    {'o','x','x','x','o','x','o','G','G','?','{','-','$','k','p','g','!','n','N','V',},
    {'o','x','x','o','o','x','x','D','N','@','%','/','z','|','c','%','(','{','L','O',},
    {'x','o','x','o','o','o','x','0','o','O','c','C','$','J','L','2','`','S','W','-',},
    {'o','x','o','o','x','x','x','o','y','<','0','6','b','i','R','q','2','T',' ','I',},
    {'x','x','o','x','o','x','o','i','f','i','s','U','D','0','?','{','.','.','[','&',},
    {'o','x','x','o','o','o','x','b','=','v','-','?','T','v','B',']','.','W','D','t',},
    {'x','o','o','o','x','x','x','x','u','8','W','@','"','s','H','R',']','?','5','z',},
    {'x','x','x','o','o','x','x','E','.','i','7','M','~','_','1','B','F','p','s','<',},
    {'o','x','o','x','x','x','o','x','?','m','p','U','.','%','=','E','^','c','j','j',},
    {'x','o','o','o','x','o','x','#','8','Z','?','B','&','v','H','B','v','$','8','6',},
    {'r','(','k','x',',','(','F','h','g','.','S','2','-','k','V','i','3','=','l','L',},
    {'w',')','k','}','!','5','=','t','6','V',',','&','Z','t','$','f','{','G','O','c',},
    {'U',' ','s','`','i','J','G','|','e','1','F',']','7','0','Y','5','B','v','+','X',},
    {'J','7',']','%',')','`','i','&',')','6','f','[','7','Z','9','!','#','`','z','h',},
    {'n','x','F','(','O',' ','<','n','t','G','G','?','[','$','B','e','b',',','h','k',},
    {'?','O','x','V','+','a','T','+','?','M','s','/','l','7','3','9','5','O','(','*',},
    {'t','L','F','x','N','e','3','1','n','x','y','/','I','A','b','Q',' ','8',']','=',},
    {'e','M','I','O','x',']','h','v',')','m','}','}','7','E','I','e','(','Y','s','w',},
    };
    assert_arrays_equal(exp_board, board);   
}

// Initial board invalid: contains four X's in a row
TEST_F(solver_tests, fourX_in_row) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "oxxxoxoooxoxooxoxoxxoxooxxooxooxxooxoxoxxxxoxxxoxoxxoxooxooxxxxxoxoxoxooxxooo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'o','x','x','x','o','x','o','o','o','x','o','N','0',')','p','j','i',')','R','I',},
    {'x','o','o','x','o','x','o','x','x','o','x','Q','+','}','j',':','d','f','|','J',},
    {'o','o','x','x','o','o','x','o','o','x','x','K','E','Q','*','*','4','P','`',' ',},
    {'o','o','x','o','x','o','x','x','x','x','o','v','@','l','x','Y','Q','`','[','?',},
    {'x','x','x','o','x','o','x','x','o','x','o','1','t','7','(','Z','Q',':','&','S',},
    {'o','x','o','o','x','x','x','x','x','o','x','|','z','A','>','N','3','c','4','R',},
    {'o','x','o','x','o','o','x','x','o','o','o','G','<','^','+','"','{','H','<','}',},
    {'A','r','x',':','4','4','h','D','w','|','s','a','s','U','A','#','@','[','`','A',},
    {'x','t','h','5','P','s','7','I','<','P','H','[','C','>','u','T','R','[','u','J',},
    {'V','i',',','J','@','M','J',']','&','+','~','~','|','h','1','M',']','E','w','v',},
    {'u','=','R','6','[','H','j','+','$','`','U','W','H','^','#','h','*','M','C','0',},
    {'Y','B','-','V','+',';','"','e','a','v',']','T','4',',','k','l','T','V','w','U',},
    {'5','J','.',']',')','.','F','0','X','i','>','2',')','K','f','2','c','e','w','E',},
    {']','Q','z','m',']','c','W','/',':','L','a','O','v','l','-','|','z','P','.','T',},
    {'7','L','c','>','t','G','P','U','-','H','x','f','y','s','T','W','T',')','c','n',},
    {'U','E','<','I','3','I','D','.','w','O','_',',','x','D','J','j','h','z','@','v',},
    {'@','9',']',':','*','0','n','^','6','R','N','l','u','j','3',')','1','W','7','&',},
    {'(','t','3',' ','6','Z','j','~','V',',','u','v','B','Q','/','M','^','z',',','t',},
    {'K','W','^','A','?','r','G','N','G','[','T','O','P','d','L','f','@','5','f','s',},
    {'>','Y','g','`','(','s','.','c','l','8','V','5','o','5','V','-','%','z','[','M',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 7, 11, &act_num_x, &act_num_o);
    EXPECT_EQ(-1, act_result);
}

// Initial board invalid: contains four O's in a columns
TEST_F(solver_tests, fourO_in_col) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "ooxoxxoxo-xooxoooooxoooxxoxoox-xxoxxooxoxxoo-xoooxxxoxxxoxooo-xoo-oxxooxxxxoxoxoooxoxoooxxxooxxxoooxxoooooxoooxo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'o','o','x','o','x','x','o','x','X','.','n','W','Y','f','@','o','&','3','(','F',},
    {'o','-','x','o','o','x','o','o','z','H','|','a','N','7','E','y','T','d','c','*',},
    {'o','o','o','x','o','o','o','x','3','B','a','?','V',' ','h','~','j','y','w','b',},
    {'x','o','x','o','o','x','-','x','L','M','g','=','}','F','g','5','F','"','S','Y',},
    {'x','o','x','x','o','o','x','o','Y','h','_','|',']','"','n','g','h','X','B','2',},
    {'x','x','o','o','-','x','o','o','6','k','K','W','}','E','M','0','$','>','.',']',},
    {'o','x','x','x','o','x','x','x','|','g','b','!','r','0','(','>','D','?','4','[',},
    {'o','x','o','o','o','-','x','o','y','>','^','~','*','7','^','s','X','(','D','U',},
    {'o','-','o','x','x','o','o','x','w','+','5','|','h','F',' ','j','$','0','k','z',},
    {'x','x','x','o','x','o','x','o',']','l','j','I','t','?','%','*','w','~','c','l',},
    {'o','o','x','o','x','o','o','o','w','H','=','D','p','7','z','P','m','B','e','K',},
    {'x','x','x','o','o','x','x','x','v','o','S','~','f',':','o','(','"','K','H','v',},
    {'o','o','o','x','x','o','o','o','U','t','2','b','C','$','c','1','x','l','v','l',},
    {'o','o','x','o','o','o','x','o','$','l','X','u','S','p','W','K','$','g','1','V',},
    {'Y','C','6','|','E','w','+','>','d','#','+','>','J','s','[','*','O','#','k','P',},
    {'o','D','F','@','2','{','h','3','c','z','g',':','>','}','5','`','u','@','~','W',},
    {'@','(','r','h','z','N','r','G','N','_','x','?','!','?',']','4',';','F','G','{',},
    {'>','/','4',']','+','I','>','}','f',':','V','%','B','I','m','=','u',']','b','D',},
    {':','[','c','<','w','>','M','1','a','q','*',' ','"','>','Y','*','d','t','(','I',},
    {'0','^','K','O','&','9','i','{','s','L','@','/','%','"','H','z','=','u',',','~',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 14, 8, &act_num_x, &act_num_o);
    EXPECT_EQ(-1, act_result);
}

// Initial board invalid: contains four X's in a NW/SE diagonal
TEST_F(solver_tests, fourX_in_diag) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "-xxooxoxoxxxoooxxoxoxxoooxoxoo-oooxxoxoxoxooxxxo-oxoooxxooxxooxxxoooxoooxooxoxxxoxxooxxoooxxoooxxoxoxoxoooxxooxxoxoxxoxxxooxoxoxoxoooxoxxoxxoxxx";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'-','x','x','o','o','x','o','x','o','x','x','x','P','B','l','=','b','j','_','-',},
    {'o','o','o','x','x','o','x','o','x','x','o','o','8','i','T','H','-','R','g',' ',},
    {'o','x','o','x','o','o','-','o','o','o','x','x','h','w','7','$','Q','@','c','a',},
    {'o','x','o','x','o','x','o','o','x','x','x','o','6',',','M','I','x','a','?','S',},
    {'-','o','x','o','o','o','x','x','o','o','x','x','4','K','+','2','!','c',';',')',},
    {'o','o','x','x','x','o','o','o','x','o','o','o','=','=','T','Q','w','p','4','o',},
    {'x','o','o','x','o','x','x','x','o','x','x','o','k','g','r','7','l','W','Z','S',},
    {'o','x','x','o','o','o','x','x','o','o','o','x','1','4','x','7','"','+',';','Q',},
    {'x','o','x','o','x','o','x','o','o','o','x','x','`','9','z','H','X','>','(','d',},
    {'o','o','x','x','o','x','o','x','x','o','x','x','z','@','X',')',';','1','$','n',},
    {'x','o','o','x','o','x','o','x','o','x','o','o','!','a','$','g','8','=','K','x',},
    {'o','x','o','x','x','o','x','x','o','x','x','x','F','{','5','1','j','[','T','t',},
    {'+','V','p','*','9','t','n','Q','/',':','G','{','z','T','c','w',':','T','1','/',},
    {'J',':','C','p','3','X','"','z','4','S','o','=','*','`','D','C','R','3','q','_',},
    {'K',':','[','C','k','=','8','$','q','J','3','<','a','S','*','t',')',',','o',':',},
    {']',']','T','g',';','x','(','m','*','z','J','R','2','$','u','}','A','.','"','3',},
    {'U','2','M','7','b','W',',','k','a','x','(','>','S','X','#','n','R',',','Y','Y',},
    {'(','%',',','6','&','~','4','G','-','4','W','c','C','%','w','(','Z','%','o','<',},
    {'z','s','W','N','M','[','=','|','d','t','V','k','y','b','~',' ','a','0','D','k',},
    {'D','{','L','e','"','E','l','Y','G',']','u','B','N','J','n','{','#',',','x','g',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 12, 12, &act_num_x, &act_num_o);
    EXPECT_EQ(-1, act_result);     
}

// Initial board invalid: contains four O's in a NE/SW diagonal
TEST_F(solver_tests, fourO_in_diag) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "oxxoxxoxxoxoooxoxxoxooooxxoxooxxxxoxx-ooxoooxxoooxoxxxoooxx-oxxxoooxoooxoooxxoxxxoxoxxooxoxoxoxooxo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'o','x','x','o','x','x','o','x','x','o','x','P','v','&',']','D','j','Y','+','#',},
    {'o','o','o','x','o','x','x','o','x','o','o','(','%','7','I','O','Q','{','3','I',},
    {'o','o','x','x','o','x','o','o','x','x','x','.','-','d','S','3','<','J','t','&',},
    {'x','o','x','x','-','o','o','x','o','o','o','q','V','U',',','Z','*','d','F','5',},
    {'x','x','o','o','o','x','o','x','x','x','o','-',')','E',' ','o','z','B','(','L',},
    {'o','o','x','x','-','o','x','x','x','o','o','Q',']','y','(','S','k','m','g',',',},
    {'o','x','o','o','o','x','o','o','o','x','x','J','(','%','s','A','I','s','d','R',},
    {'o','x','x','x','o','x','o','x','x','o','o',';','*','>','g','O','T','%','o','-',},
    {'x','o','x','o','x','o','x','o','o','x','o','R','k','Y','D','}','b','f','y','T',},
    {'n','~','l','y','=','U','F','q','W','4','{','!','j','Q','M','G','v','?','L','.',},
    {'o','"','`','[','[','"','V',';','f','Q','p','U','M','Z','L','k','0','s','Z','g',},
    {'(','W','f','o','&','1','7','y','P','d',')','@','c','i','x','?','i','P','Z','P',},
    {'~','H','&','L','$','P','8','1','D','p','v','I','H','Z','6','K','k','N','E',':',},
    {'0','N','W','s','6','Q','3',' ','"','j','M','}','1','P','J','5','!','`','C','B',},
    {'Q',':','h','v','q',' ','B','^','N','d','x','^','4','P','O','G','~','_','D','}',},
    {'J','q','{','X','B','G','m','A','%','/','c','V','F','J','J','9','J','l','w','u',},
    {'N','m','Q','_',';','!','(',';','`','K','9','(',':','3','a','Z','W','L','{',']',},
    {'[',']','0','#','(','Z','9','N','D','.','D','r','{','u','S','4','v','W','O','T',},
    {'$','f',']',';','y','?','r','Q','h','n','+','E','I',';','E','M','u','[','|','7',},
    {'i','A','*','b','8','Z','v',',','3','D','a','4','+','?','O','"','[','C','P','D',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 9, 11, &act_num_x, &act_num_o);
    EXPECT_EQ(-1, act_result);    
}

// Initial board invalid: contains at least one invalid sybmol
TEST_F(solver_tests, invalid_symbol) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "--x--xx-oxx--o-----xx---q-o-ooo---o--x---xx-----o-x------o--x----------x-------oxxx-ox---o-------oo-x---x-o-oo-xo--o-ooo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'(','?','5','C','I',')','f','$','a','v','`','X','O',';','B',']','o','w','E','&',},
    {'K','}','@',']','`','V','0','`','0','/','E','7','N','X','W','t','^','?','y','=',},
    {'3','Z','u','c','u','5','>','b','+','c','h','V','^',')','4','@',']','A','}','l',},
    {'Q','@','"','|','x','Y','r','W','u','l','q','*','D','d','j',':','z',')','}','&',},
    {'i','f','Y','E','m','j','e','G',')','`','2','Z','"','4','U','z','m','H','P','a',},
    {'2','B','k','V','%','S','p',' ','Y','k','#','C','P','Y','e','>','A','L','e','J',},
    {'-','t','#',',',')','X','(','t','!','U','V','0','t','?','f','y','r','T','v','L',},
    {'A','v','l','q','M','R','-','n','{','o',':','(','e','=','3','n','u','8','`','s',},
    {'m','7','$','`','V','g','Z','F','<','O','o','Z','F',']','L','q','-','V','`','&',},
    {'G','z','-','-','5','>','x','+','V','Z','{','B','n','|','#','F','d','Z','i','"',},
    {'*','Z',']','N','4','(','@','A','Z','!','E','"','y','R','/','/','p','&','8','E',},
    {']','4','g','L','2','j','o','s','E','Z','u','M','5','P','{','I','T','<','h','/',},
    {':','.','2','4',']','>','A','L','A','V','q','~','g','V','L','y','>','<','n','`',},
    {'v','a','.',')','/','*','P','c','C','9','p','[','D','#','l','"','>','.','N','`',},
    {'d','=',']','J','s',')','D','/','C','0','p',':','o','~','A','~','(','q','`','G',},
    {'(','Q','#','L','Q','p','K','l','{','z','J','^','5','(',')','(','1','J','6','T',},
    {'X','(','l','E','$','+','D','+','|','"','O','%','S','S','N','"','A','y','o',':',},
    {'q',':','u','%','B','{',',','Q','G','B','&','|','J','o','B','K','z','c','V','t',},
    {'f','&','v','7','V','E',':','t','=','*','-','/','A','#','1','a',' ','=','3','D',},
    {'`','6','A','(','(','`','S','~','D','(','t','+','*','k','C','^','/','Z','S','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 10, 12, &act_num_x, &act_num_o);
    EXPECT_EQ(-2, act_result);
}

// Initial board cannot be solved using heuristics
TEST_F(solver_tests, hard_puzzle1) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xxo--xx-xxo-xx--o------x--o---x---xx--oooo--------ox-o------x-----x--x--o----x----------x-xx---o-ooo-x--";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'(','?','5','C','I',')','f','$','a','v','`','X','O',';','B',']','o','w','E','&',},
    {'K','}','@',']','`','V','0','`','0','/','E','7','N','X','W','t','^','?','y','=',},
    {'3','Z','u','c','u','5','>','b','+','c','h','V','^',')','4','@',']','A','}','l',},
    {'Q','@','"','|','x','Y','r','W','u','l','q','*','D','d','j',':','z',')','}','&',},
    {'i','f','Y','E','m','j','e','G',')','`','2','Z','"','4','U','z','m','H','P','a',},
    {'2','B','k','V','%','S','p',' ','Y','k','#','C','P','Y','e','>','A','L','e','J',},
    {'-','t','#',',',')','X','(','t','!','U','V','0','t','?','f','y','r','T','v','L',},
    {'A','v','l','q','M','R','-','n','{','o',':','(','e','=','3','n','u','8','`','s',},
    {'m','7','$','`','V','g','Z','F','<','O','o','Z','F',']','L','q','-','V','`','&',},
    {'G','z','-','-','5','>','x','+','V','Z','{','B','n','|','#','F','d','Z','i','"',},
    {'*','Z',']','N','4','(','@','A','Z','!','E','"','y','R','/','/','p','&','8','E',},
    {']','4','g','L','2','j','o','s','E','Z','u','M','5','P','{','I','T','<','h','/',},
    {':','.','2','4',']','>','A','L','A','V','q','~','g','V','L','y','>','<','n','`',},
    {'v','a','.',')','/','*','P','c','C','9','p','[','D','#','l','"','>','.','N','`',},
    {'d','=',']','J','s',')','D','/','C','0','p',':','o','~','A','~','(','q','`','G',},
    {'(','Q','#','L','Q','p','K','l','{','z','J','^','5','(',')','(','1','J','6','T',},
    {'X','(','l','E','$','+','D','+','|','"','O','%','S','S','N','"','A','y','o',':',},
    {'q',':','u','%','B','{',',','Q','G','B','&','|','J','o','B','K','z','c','V','t',},
    {'f','&','v','7','V','E',':','t','=','*','-','/','A','#','1','a',' ','=','3','D',},
    {'`','6','A','(','(','`','S','~','D','(','t','+','*','k','C','^','/','Z','S','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 13, 8, &act_num_x, &act_num_o);
    EXPECT_EQ(0, act_result);  
}

// Initial board cannot be solved using heuristics
TEST_F(solver_tests, hard_puzzle2) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "-x--oo-oo---ooxo-x----x---ooxx---xo-o---o-xo---x-";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'(','?','5','C','I',')','f','$','a','v','`','X','O',';','B',']','o','w','E','&',},
    {'K','}','@',']','`','V','0','`','0','/','E','7','N','X','W','t','^','?','y','=',},
    {'3','Z','u','c','u','5','>','b','+','c','h','V','^',')','4','@',']','A','}','l',},
    {'Q','@','"','|','x','Y','r','W','u','l','q','*','D','d','j',':','z',')','}','&',},
    {'i','f','Y','E','m','j','e','G',')','`','2','Z','"','4','U','z','m','H','P','a',},
    {'2','B','k','V','%','S','p',' ','Y','k','#','C','P','Y','e','>','A','L','e','J',},
    {'-','t','#',',',')','X','(','t','!','U','V','0','t','?','f','y','r','T','v','L',},
    {'A','v','l','q','M','R','-','n','{','o',':','(','e','=','3','n','u','8','`','s',},
    {'m','7','$','`','V','g','Z','F','<','O','o','Z','F',']','L','q','-','V','`','&',},
    {'G','z','-','-','5','>','x','+','V','Z','{','B','n','|','#','F','d','Z','i','"',},
    {'*','Z',']','N','4','(','@','A','Z','!','E','"','y','R','/','/','p','&','8','E',},
    {']','4','g','L','2','j','o','s','E','Z','u','M','5','P','{','I','T','<','h','/',},
    {':','.','2','4',']','>','A','L','A','V','q','~','g','V','L','y','>','<','n','`',},
    {'v','a','.',')','/','*','P','c','C','9','p','[','D','#','l','"','>','.','N','`',},
    {'d','=',']','J','s',')','D','/','C','0','p',':','o','~','A','~','(','q','`','G',},
    {'(','Q','#','L','Q','p','K','l','{','z','J','^','5','(',')','(','1','J','6','T',},
    {'X','(','l','E','$','+','D','+','|','"','O','%','S','S','N','"','A','y','o',':',},
    {'q',':','u','%','B','{',',','Q','G','B','&','|','J','o','B','K','z','c','V','t',},
    {'f','&','v','7','V','E',':','t','=','*','-','/','A','#','1','a',' ','=','3','D',},
    {'`','6','A','(','(','`','S','~','D','(','t','+','*','k','C','^','/','Z','S','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 7, 7, &act_num_x, &act_num_o);
    EXPECT_EQ(0, act_result);  
}


// Invalid board has no solution.
TEST_F(solver_tests, no_solution1) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "xxx-xoooooxoxxoo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'(','?','5','C','I',')','f','$','a','v','`','X','O',';','B',']','o','w','E','&',},
    {'K','}','@',']','`','V','0','`','0','/','E','7','N','X','W','t','^','?','y','=',},
    {'3','Z','u','c','u','5','>','b','+','c','h','V','^',')','4','@',']','A','}','l',},
    {'Q','@','"','|','x','Y','r','W','u','l','q','*','D','d','j',':','z',')','}','&',},
    {'i','f','Y','E','m','j','e','G',')','`','2','Z','"','4','U','z','m','H','P','a',},
    {'2','B','k','V','%','S','p',' ','Y','k','#','C','P','Y','e','>','A','L','e','J',},
    {'-','t','#',',',')','X','(','t','!','U','V','0','t','?','f','y','r','T','v','L',},
    {'A','v','l','q','M','R','-','n','{','o',':','(','e','=','3','n','u','8','`','s',},
    {'m','7','$','`','V','g','Z','F','<','O','o','Z','F',']','L','q','-','V','`','&',},
    {'G','z','-','-','5','>','x','+','V','Z','{','B','n','|','#','F','d','Z','i','"',},
    {'*','Z',']','N','4','(','@','A','Z','!','E','"','y','R','/','/','p','&','8','E',},
    {']','4','g','L','2','j','o','s','E','Z','u','M','5','P','{','I','T','<','h','/',},
    {':','.','2','4',']','>','A','L','A','V','q','~','g','V','L','y','>','<','n','`',},
    {'v','a','.',')','/','*','P','c','C','9','p','[','D','#','l','"','>','.','N','`',},
    {'d','=',']','J','s',')','D','/','C','0','p',':','o','~','A','~','(','q','`','G',},
    {'(','Q','#','L','Q','p','K','l','{','z','J','^','5','(',')','(','1','J','6','T',},
    {'X','(','l','E','$','+','D','+','|','"','O','%','S','S','N','"','A','y','o',':',},
    {'q',':','u','%','B','{',',','Q','G','B','&','|','J','o','B','K','z','c','V','t',},
    {'f','&','v','7','V','E',':','t','=','*','-','/','A','#','1','a',' ','=','3','D',},
    {'`','6','A','(','(','`','S','~','D','(','t','+','*','k','C','^','/','Z','S','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 4, 4, &act_num_x, &act_num_o);
    EXPECT_EQ(-3, act_result); 
}

// Invalid board has no solution.
TEST_F(solver_tests, no_solution2) {
    int act_num_x = -1, act_num_o = -1;
    const char *init_board = "--x--xx-oxx--o-----xx-----o-ooo---o--x---xx-----o-x------o--x----------x-------oxxx-ox---o-------oo-x---x-o-oo-xo--o-ooo";
    char board_array[MAX_ROWS][MAX_COLS] = {
    {'(','?','5','C','I',')','f','$','a','v','`','X','O',';','B',']','o','w','E','&',},
    {'K','}','@',']','`','V','0','`','0','/','E','7','N','X','W','t','^','?','y','=',},
    {'3','Z','u','c','u','5','>','b','+','c','h','V','^',')','4','@',']','A','}','l',},
    {'Q','@','"','|','x','Y','r','W','u','l','q','*','D','d','j',':','z',')','}','&',},
    {'i','f','Y','E','m','j','e','G',')','`','2','Z','"','4','U','z','m','H','P','a',},
    {'2','B','k','V','%','S','p',' ','Y','k','#','C','P','Y','e','>','A','L','e','J',},
    {'-','t','#',',',')','X','(','t','!','U','V','0','t','?','f','y','r','T','v','L',},
    {'A','v','l','q','M','R','-','n','{','o',':','(','e','=','3','n','u','8','`','s',},
    {'m','7','$','`','V','g','Z','F','<','O','o','Z','F',']','L','q','-','V','`','&',},
    {'G','z','-','-','5','>','x','+','V','Z','{','B','n','|','#','F','d','Z','i','"',},
    {'*','Z',']','N','4','(','@','A','Z','!','E','"','y','R','/','/','p','&','8','E',},
    {']','4','g','L','2','j','o','s','E','Z','u','M','5','P','{','I','T','<','h','/',},
    {':','.','2','4',']','>','A','L','A','V','q','~','g','V','L','y','>','<','n','`',},
    {'v','a','.',')','/','*','P','c','C','9','p','[','D','#','l','"','>','.','N','`',},
    {'d','=',']','J','s',')','D','/','C','0','p',':','o','~','A','~','(','q','`','G',},
    {'(','Q','#','L','Q','p','K','l','{','z','J','^','5','(',')','(','1','J','6','T',},
    {'X','(','l','E','$','+','D','+','|','"','O','%','S','S','N','"','A','y','o',':',},
    {'q',':','u','%','B','{',',','Q','G','B','&','|','J','o','B','K','z','c','V','t',},
    {'f','&','v','7','V','E',':','t','=','*','-','/','A','#','1','a',' ','=','3','D',},
    {'`','6','A','(','(','`','S','~','D','(','t','+','*','k','C','^','/','Z','S','L',},
    };
    memcpy(board, board_array, sizeof(board_array));
    int act_result = solve(init_board, 10, 12, &act_num_x, &act_num_o);
    EXPECT_EQ(-3, act_result);
}

